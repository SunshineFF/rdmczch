<?php
namespace Mobile\Controller;

use Mobile\Logic\ImageHelper;
use Mobile\Logic\QRcodeHelp;

class ProductController extends MobileBaseController
{
    protected $user_id;
    protected $user;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        if (session('?user')) {
            $user = session('user');
            $user = M('users')->where("user_id = {$user['user_id']}")->find();
            session('user', $user);  //覆盖session 中的 user
            $this->user = $user;
            $this->user_id = $user['user_id'];
            $this->assign('user', $user); //存储用户信息
        }
        $nologin = array(
            'login', 'pop_login', 'do_login', 'logout', 'verify', 'set_pwd', 'finished',
            'verifyHandle', 'reg', 'send_sms_reg_code', 'find_pwd', 'check_validate_code',
            'forget_pwd', 'check_captcha', 'check_username', 'send_validate_code', 'express',
        );
        if (!$this->user_id && !in_array(ACTION_NAME, $nologin)) {
            header("location:" . U('Mobile/User/login'));
            exit;
        }
    }

    public function index(){

        return $this->display();
    }

    /**
     * 支付逻辑
     */
    public function post_product(){
        $orderModel = M('product_order');
        try{
            $orderModel->startTrans();
            $orderData = $this->initOrderData();
            $return = $this->payOrder($orderData);
            $orderModel->add($orderData);
            $orderModel->commit();
            $this->success($return['msg'],U('User/index'));
        }catch (\Exception $exception){
            $orderModel->rollback();
            $this->error($exception->getMessage(),U('Product/index'));
        }
    }

    /** 获取订单方式并进行支付
     * @param $orderData
     * @return mixed
     */
    protected function payOrder($orderData){
        $payment = $this->initPayment();
        return $payment->payForProduct($orderData['total'],$this->user);
    }

    private function initPayment(){
        $method = I('method');
        include_once "plugins/payment/{$method}/{$method}.class.php"; // D:\wamp\www\svn_tpshop\www\plugins\payment\alipay\alipayPayment.class.php
        $code = '\\'.$method; // \alipay
        return new $code();
    }

    /**
     * 选择支付方式页面
     */
    public function select_payment_method(){
        try{
            $product = $this->getProductData(I('product_id'));
            $this->checkUserHasProduct($product['id']);
            $this->assign('product',$product);
        }catch (\Exception $exception){
            $this->error($exception->getMessage());
        }
        $this->display();
    }

    /**
     * @param $productId
     * @throws \Exception
     */
    protected function checkUserHasProduct($productId){
        $condition = [];
        $condition['user_id'] = $this->user_id;
        $condition['product_id'] = $productId;
        $data = M('product_order')->where($condition)->find();
        if ($data){
            throw new \Exception('您已经收藏了这个藏品，不能重复收藏');
        }
    }

    /** 初始化订单数据
     * @return array
     * @throws \Exception
     */
    protected function initOrderData(){
        $productId = I('product_id');
        $time = time();
        $product = $this->getProductData($productId);
        $method = I('method');
        $data = [];
        $data['product_id'] = $productId;
        $data['total'] = $product['price'];
        $data['created_at'] = $time;
        $data['updated_at'] = $time;
        $data['user_id'] = $this->user_id;
        $data['status'] = $this->getStatus($method);
        $data['pay_method'] = $method;
        $data['order_id'] = date('YmdHis').rand(1000,9999);
        return $data;
    }

    /** 获取藏品信息
     * @param $productId
     * @return mixed
     * @throws \Exception
     */
    protected function getProductData($productId){
       $product = M('product')->where(['id'=>$productId])->find();
       if (!$product){
           throw new \Exception('藏品不存在');
       }
       return $product;
    }

    /** 根据订单支付方式 确定订单当前状态
     * @param $method
     * @return int
     */
    protected function getStatus($method){
        switch ($method){
            case 'yue':
                return 1;
            case 'xianxia':
                return 0;
            default:
                return 0;
        }
    }

    /** 用户的收藏列表
     * @throws \think\db\exception\BindParamException
     * @throws \think\exception\PDOException
     */
    public function user_list(){
        $sql = "select o.*,p.name,p.thumd_img,p.face_value,p.price,p.jifen from __PREFIX__product_order o left join __PREFIX__product p on p.id = o.product_id
 where o.user_id=".$this->user_id;
        $orderList = M('product_order')->query($sql);
        $this->assign('order_list',$orderList);
        return $this->display();
    }

    /**
     * 付款提交审核
     */
    public function pay_again(){
        $orderId = I('order_id');
        M('product_order')->where(['id' =>$orderId])->save(['status' => 5]);
        $this->success('已提交支付审核，我们会尽快核实！',U('user_list'));
    }

    /**
     *  我的海报
     */
    public function my_poster(){
        $this->assign('poster_imag','/'.$this->user['poster_imag']);
        $this->assign('has_poster',$this->user['poster_imag'] ? 1 : 0);
        $this->display();
    }

    /**
     * 合成二维码
     */
    public function ajax_get_poster(){
        $baseDir = 'Public/poster/';
        $posterImage = [
            '20190528112023.png' => [
                'x' => 267,
                'y' => 418,
                'width' => 235
            ],
            '20190528134854.png' =>[
                'x' => 220,
                'y' => 642,
                'width' => 315
            ],
            '20190529101216.png' => [
                'x' => 247,
                'y' => 873,
                'width' => 260
            ],
            '20190529101229.png' => [
                'x' => 356,
                'y' => 263,
                'width' => 145
            ]
        ];
        $img = I('back_img') ? I('back_img') : '20190528134854.png';
        $backImage = $baseDir.$img;
        $imageHelper = new ImageHelper();
        $return = [];
        try{
            $image = $imageHelper->mergeImageFromQRcode($this->getQRcode(),$backImage,$posterImage[$img]['width'],$posterImage[$img]['x'],$posterImage[$img]['y']);
            if ($this->user['poster_imag']){
                $root = str_replace('\\','/',getcwd().'/');
                unlink($root.$this->user['poster_imag']);
            }
            $image = $this->getImagePositonDir($image);
            $this->user['poster_imag'] = $image;
            M('users')->where(['user_id' => $this->user_id])->save(['poster_imag'=> $image]);
            $return['code'] = 200;
            $return['data'] = $image;
            echo json_encode($return);
            exit;
        }catch (\Exception $exception){
            $return['code'] = 400;
            $return['code'] = "出现了一些未知的的错误，在紧急修复中。";
            \Think\Log::write($exception->getMessage().$exception->getTraceAsString(),'WARN');
        }
        echo \GuzzleHttp\json_encode($return);
        exit;
    }

    protected function getImagePositonDir($path){
        $image = end(explode('/',$path));
        $QRcodeHelp = new QRcodeHelp();
        $path = $QRcodeHelp->getTodayDir().'/'.$image;
        return $path;
    }

    /** 获取二维码地址
     * @return string
     */
    protected function getQRcode(){
        if ($this->user['qr_code']){
            return $this->user['qr_code'];
        }
        $inviteCode = $this->user['invite_code'];
        if (!$inviteCode){
            $inviteCode = $this->user_id.rand(1000,9000);
            $this->user['invite_code'] = $inviteCode;
        }
        $url = $_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['SERVER_NAME'].'/Mobile/Index/index.html?invite_code='.$inviteCode;
        $qrcode = new QRcodeHelp();
        $qrcodeString = $qrcode->getPng($url);
        $this->user['qr_code'] = $qrcodeString;
        M('users')->where(['user_id' => $this->user_id])->save($this->user);
        return $qrcodeString;
    }

}