<?php

namespace Admin\Controller;

use Think\AjaxPage;
use Think\Page;
use Home\Logic\UsersLogic;

class ProductController extends BaseController {

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index(){
        return $this->display();
    }
    /**
     *  ajax 获取订单列表
     */
    public function ajax_index(){
        $condition = $this->initParams();
        $model = M('product_order');
        $count = $model->where($condition)->count();
        $Page  = new AjaxPage($count,10);
        //  搜索条件下 分页赋值
        foreach($condition as $key=>$val) {
            $Page->parameter[$key]   =   urlencode($val);
        }
        $orderList = $model->where($condition)->limit($Page->firstRow.','.$Page->listRows)->select();
        $show = $Page->show();
        $this->assign('orderList',$orderList);
        $this->assign('page',$show);// 赋值分页输出
        $this->display();
    }

    /** 审核订单
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function detail(){
        $orderId = I('id');
        if(!$orderId){
            $this->error('错误的参数',U('Admin/Product/index'));
        }
        if ($_POST){
            $status = I('status');
            $statusArray = [
                0 => "未支付",
                1 => "已支付",
                5 => "待审核",
            ];
            if ($status != 1){
                $this->success('订单状态未改变',U('Admin/Product/index'));
                exit;
            }

            $userLogic = new UsersLogic();
            try{
                $order = M('order')->where(['id' => $orderId])->find();  //支付逻辑
                $money = $order['total'];
                $user = $userLogic->where(['user_id' => $order['user_id']])->find();
                $userLogic->startTrans();
                $user['tou_zi'] = $user['tou_zi'] + $money;
                $userLogic->save($user);
                $userLogic->updateZhiTui($user,$money);
                accountLogOnly($user['user_id'],$money,'用户购买藏品，线下支付');
                $userLogic->commit();
            }catch (\Exception $exception){
                $userLogic->rollback();
                $this->success($exception->getMessage(),U('Admin/Product/index'));
                exit;
            }
            M('product_order')->where(['id' => $orderId])->save(['status' => $status]);
            $this->success('审核订单成功，修改订单状态为'.$statusArray[$status],U('Admin/Product/index'));
            exit;
        }
        $order = M('product_order')->where(['id'=>$orderId])->find();
        $this->assign('order',$order);
        $this->display();
    }

    /** 初始化参数
     * @return array|void
     */
    protected function initParams(){
        $condition = [];
        I('product_name') ? $condition['product_name'] = array("like","%".I('product_name')."%") : false;
        I('order_id') ? $condition['order_id'] = I('order_id') : false;
        I('pay_status') ? $condition['status'] = I('pay_status') : false;
        I('pay_method') ? $condition['pay_method'] = I('pay_method') : false;
        $this->getConditionTime($condition);
        return $condition;
    }

    protected function getConditionTime(&$condition){
        $time = I('time');
        if ($time){
            $time = explode('-',$time);
            $condition['created_at'] = array('gt' => strtotime(trim($time[0])));
            $condition['updated_at'] = array('lt' => strtotime(trim($time[1])));
        }
    }
}